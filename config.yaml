properties:
  resources:
    - resource: PSDscResources/Script
      id: heavy_demo
      directives:
        description: Notepad + curl + rundll32 + EncodedCommand + Persistence + fake dump (benign)
        allowPrerelease: true
      settings:
        GetScript: |
          #"state"
        TestScript: |
          return $false
        SetScript: |
          try {
            $dir = "C:\Sample"
            New-Item -ItemType Directory -Path $dir -Force | Out-Null

            # 1) Notepad - widoczny proces/okno
            Start-Process notepad.exe

            # 2) Szybki curl/IWR do internetu -> zapis kodu HTTP
            try {
              $curl = Join-Path $env:SystemRoot "System32\curl.exe"
              if (Test-Path $curl) {
                $code = & $curl -s -o NUL -w "%{http_code}`n" https://www.google.com --max-time 5
                $code | Out-File (Join-Path $dir "curl_code.txt") -Encoding ASCII
              } else {
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                $resp = Invoke-WebRequest -Uri "https://www.google.com" -UseBasicParsing -TimeoutSec 5
                ($resp.StatusCode.ToString()) | Out-File (Join-Path $dir "curl_code.txt") -Encoding ASCII
              }
            } catch {
              ("NET-ERROR: " + $_.Exception.Message) | Out-File (Join-Path $dir "curl_code.txt")
            }

            # 3) LOLBIN: rundll32 otwiera Google w domyślnej przeglądarce
            Start-Process rundll32.exe -ArgumentList "url.dll,FileProtocolHandler https://www.google.com"

            # 4) Podejrzany PowerShell: EncodedCommand (robi tylko 'whoami')
            try {
              $cmd = 'whoami'
              $bytes = [System.Text.Encoding]::Unicode.GetBytes($cmd)
              $b64 = [Convert]::ToBase64String($bytes)
              Start-Process powershell.exe -ArgumentList "-NoLogo -NoProfile -ExecutionPolicy Bypass -EncodedCommand $b64"
            } catch { }

            # 5) Persistence: HKCU\Run -> notepad.exe
            try {
              $runKey = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
              New-ItemProperty -Path $runKey -Name "WingetDemo" -Value "notepad.exe" -PropertyType String -Force | Out-Null
            } catch { }

            # 6) Persistence: Scheduled Task (Logon) -> notepad.exe
            try {
              $task = "WingetDemoLogon"
              $act  = New-ScheduledTaskAction -Execute "notepad.exe"
              $trig = New-ScheduledTaskTrigger -AtLogOn
              Register-ScheduledTask -TaskName $task -Action $act -Trigger $trig -Description "Winget heavy demo" -Force | Out-Null
            } catch { }

            # 7) „Artefakt” dumpu (FAKE): lsass.dmp z losowymi bajtami
            try {
              $fake = Join-Path $dir "lsass.dmp"
              $rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
              $buf = New-Object byte[] (1024*64) # 64KB losowych danych
              $rng.GetBytes($buf)
              [IO.File]::WriteAllBytes($fake,$buf)
            } catch { }

            # Log pod sumę kontroli
            ("DONE @ " + (Get-Date)) | Out-File (Join-Path $dir "heavy_demo.log")
          } catch {
            "ERROR: $($_.Exception.Message)" | Out-File (Join-Path $dir "heavy_demo.err")
          }
  configurationVersion: 0.2
